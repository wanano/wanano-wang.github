<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡比巴拉的海</title>
  <subtitle>wanano&#39;s homepage</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanano.github.io/"/>
  <updated>2016-06-26T07:52:48.658Z</updated>
  <id>http://wanano.github.io/</id>
  
  <author>
    <name>wanano</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于微软speach SDK的语音朗读器的实现及语音控制</title>
    <link href="http://wanano.github.io/2016/06/26/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E8%BD%AFspeach-SDK%E7%9A%84%E8%AF%AD%E9%9F%B3%E6%9C%97%E8%AF%BB%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E8%AF%AD%E9%9F%B3%E6%8E%A7%E5%88%B6/"/>
    <id>http://wanano.github.io/2016/06/26/基于微软speach-SDK的语音朗读器的实现及语音控制/</id>
    <published>2016-06-26T06:46:19.000Z</published>
    <updated>2016-06-26T07:52:48.658Z</updated>
    
    <content type="html">&lt;p&gt;转眼研一就马上过去，前段时间临近期末，各种报告作业需要提交和检查，自己忙于应付期末，一直没时间来打理博客并且学习自己感兴趣的东西（好像这个学期学得也很少，还是自己太懒了啊！），惭愧惭愧。不过前段时间一门课程的需要，自己捣鼓了一个小玩意，用C++实现朗读器的语音控制，感觉还挺好玩，也相对来说比较简单（连我都做出来了，那能不简单么，嘿嘿），觉得可以加入到我的小博客里，因此现将我做的过程和方法与大家分享，欢迎大家指导交流。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;首先先吐槽会：这个学期选了一门《数字语音信号处理课程》，这门课程要求不仅需要进行选定方向的文献综述报告，还必须在期末阶段做一个课程相关方面的工程项目，从一开始就知道这门课程会是一个天坑，而后面的时间证明–这不仅仅是一个天坑，这是个黑洞(宝宝心里苦啊！)。虽然说过程比较艰辛，这一门课的工作量至少抵得上其他几门课程的工作量，但最后自己还是简单的做出来了一个语音朗读器，并且通过C++语音实现了简单的控制。&lt;br&gt;整个项目分为两个模块，一个是用C#实现的朗读器模块，另外一个就是用C++语音控制模块。需要声明的是，代码我是在网上下的，然后在其基础上进行了相应的修改，自己只是为了好玩并且相应的学习下这方面，同时完成作业，代码不会用于任何其他用途，嘻嘻，如有需要我会贴在我的github上，欢迎大家下载玩一玩。&lt;br&gt;—-未完待续！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转眼研一就马上过去，前段时间临近期末，各种报告作业需要提交和检查，自己忙于应付期末，一直没时间来打理博客并且学习自己感兴趣的东西（好像这个学期学得也很少，还是自己太懒了啊！），惭愧惭愧。不过前段时间一门课程的需要，自己捣鼓了一个小玩意，用C++实现朗读器的语音控制，感觉还挺好玩，也相对来说比较简单（连我都做出来了，那能不简单么，嘿嘿），觉得可以加入到我的小博客里，因此现将我做的过程和方法与大家分享，欢迎大家指导交流。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="http://wanano.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="语音识别" scheme="http://wanano.github.io/tags/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/"/>
    
      <category term="语音控制" scheme="http://wanano.github.io/tags/%E8%AF%AD%E9%9F%B3%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>论文总结--基于图的流行排序的显著性检测</title>
    <link href="http://wanano.github.io/2016/05/21/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93-%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B/"/>
    <id>http://wanano.github.io/2016/05/21/论文总结-基于图的流行排序的显著性检测/</id>
    <published>2016-05-21T01:44:18.000Z</published>
    <updated>2016-05-21T04:30:40.299Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt; 最近详细的看的一篇显著性检测方面论文，现将一些自己的理解贴出来,如有错误望大家指正！&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h3&gt;&lt;p&gt;这篇论文是2013年发表在CVPR（computer vision and pattern recognition）杂志上的一篇论文，十分经典，作者是大连理工大学的杨川，张力和，卢湖川等，我虽然对这方面的论文详细了解的不深，毕竟不是主要做这个的，但是特意去搜了下&lt;a href=&quot;http://ice.dlut.edu.cn/lu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;卢湖川&lt;/a&gt;教授，此乃大牛教授也，并且挂他名的论文很多源码都贴在他的项目网站上，天地良心有木有！！中国很多的论文质量不高有时候就是因为经不起考验(也就是造假)，但像卢教授这样的敢于直接放出源码的真的太少了，致敬！学习！&lt;/p&gt;
&lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;人眼具备独特的视觉注意机制，它是指人眼能够有效的发现场景中最具有吸引的的重要区域。显著性检测的目的就是模拟这种机制，使计算机视觉也具备类似的能力。&lt;/p&gt;
&lt;p&gt;显著性的方法可以划分为自底向上和自顶向下两大类，自底向上是指利用一部分的先验知识，然后最后得到最后的显著性检测结果。自上而下是指先给定最后的真实结果，然后来设计方法得到实际的显著性检测结果。从显著性的发展过程及最终的应用方向上考虑，又可分为视觉关注点预测和显著性目标检测两类，前者倾向与捕捉图像中最具吸引力的关键点，后者追求完整、均匀的突出整个目标。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 提出问题 &lt;/strong&gt;&lt;br&gt;大多数自底向上的显著性检测算法是居于局部或全局的对比度的，而很少使用图的分割来进行显著性检测，（我的理解就是将图像分为背景和前景来进行显著性检测），而很显然后者的方法是更加好的，更能突出前景目标，效果更好。&lt;br&gt;&lt;strong&gt; 本文方法 &lt;/strong&gt;&lt;br&gt;本文利用给定的背景线索，采用自底向上的方法，将流行排序应用于显著性检测，并且采用不同的方法对前景和前景选取显著性种子节点，然后进行流行排序，即两阶段过程，图中每个节点的显著程度通过其相对于种子节点的排序得分来度量，最后得到显著图。&lt;/p&gt;
&lt;h3 id=&quot;算法思想&quot;&gt;&lt;a href=&quot;#算法思想&quot; class=&quot;headerlink&quot; title=&quot;算法思想&quot;&gt;&lt;/a&gt;算法思想&lt;/h3&gt;&lt;h4 id=&quot;算法流程图&quot;&gt;&lt;a href=&quot;#算法流程图&quot; class=&quot;headerlink&quot; title=&quot;算法流程图&quot;&gt;&lt;/a&gt;算法流程图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这个流程图写的比较详细，便不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;算法模型&quot;&gt;&lt;a href=&quot;#算法模型&quot; class=&quot;headerlink&quot; title=&quot;算法模型&quot;&gt;&lt;/a&gt;算法模型&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这是论文原文中给出的算法模型图，根据图也很好理解，算法将显著性检测分为两阶段的过程，在第一阶段中，利用图像的边界先验知识，即假设图像的边界是背景区域，分别取上下左右四条边界的超像素点作为查询对象，然后进行排序，得到四幅显著性图，然后再将这四幅显著图相乘，这就是第一阶段最终的显著图，这一方法叫做SC方法（separation/combine），这样做的好处可以在于有时候显著性目标与某一边界显著性相邻，但是与其他边界区别很大，如果同时对四条边界进行流行排序得到显著图效果就不会很理想，相反，SC方法就可以很好的改善这一情况。之后再进行第二阶段的排序，第二阶段的查询对象时前景节点，利用自适应阈值分割得到，再进行流行排序就可以得到最终的显著图。&lt;/p&gt;
&lt;h3 id=&quot;算法的具体实现&quot;&gt;&lt;a href=&quot;#算法的具体实现&quot; class=&quot;headerlink&quot; title=&quot;算法的具体实现&quot;&gt;&lt;/a&gt;算法的具体实现&lt;/h3&gt;&lt;h4 id=&quot;采用SLIC方法将图像分解为超像素表示，然后利用这些超像素点作为节点，构造K正则图。&quot;&gt;&lt;a href=&quot;#采用SLIC方法将图像分解为超像素表示，然后利用这些超像素点作为节点，构造K正则图。&quot; class=&quot;headerlink&quot; title=&quot;采用SLIC方法将图像分解为超像素表示，然后利用这些超像素点作为节点，构造K正则图。&quot;&gt;&lt;/a&gt;采用SLIC方法将图像分解为超像素表示，然后利用这些超像素点作为节点，构造K正则图。&lt;/h4&gt;&lt;p&gt;SLIC综合考虑像素间的颜色和距离的相似性，将彼此相邻且颜色接近的像素聚集为局部小区域，每个节点不仅和空间上的邻接的点相连，与该节点的邻接节点共享同一个超像素边界的节点也相连。&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;流行排序&quot;&gt;&lt;a href=&quot;#流行排序&quot; class=&quot;headerlink&quot; title=&quot;流行排序&quot;&gt;&lt;/a&gt;流行排序&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;第一阶段&quot;&gt;&lt;a href=&quot;#第一阶段&quot; class=&quot;headerlink&quot; title=&quot;第一阶段&quot;&gt;&lt;/a&gt;第一阶段&lt;/h4&gt;&lt;p&gt;第一阶段的过程的具体实现就是取背景种子节点作为查询对象进行流行排序，得到显著图，一个节点i相对于查询对象（上边界）的显著性用公式表示为：&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg5.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这个很好理解，f表示节点和查询对象的相似度，因为查询对象是背景，所以最终得到显著性应该是与前景目标的相似度，所以要用1减去f。&lt;br&gt;之后第一阶段的显著图为四个边界的乘积，即：&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;第二阶段&quot;&gt;&lt;a href=&quot;#第二阶段&quot; class=&quot;headerlink&quot; title=&quot;第二阶段&quot;&gt;&lt;/a&gt;第二阶段&lt;/h4&gt;&lt;p&gt;在第一阶段的基础上，利用自适应阈值分割的方法分割第一阶段的显著图，得到前景种子节点，即第二阶段的查询对象，之后再进行流行排序，就可以得到第二阶段的显著图：&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg7.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;一般来说，显著性目标具有结构紧凑，外观特征均匀的特点，在实验中有时候我们选取前景种子节点时不够正确，但还是能够得到很好的实验结果，这是因为显著目标内节点的相关性往往远大于显著节点和其他节点的相关性。&lt;/p&gt;
&lt;h3 id=&quot;实验结果&quot;&gt;&lt;a href=&quot;#实验结果&quot; class=&quot;headerlink&quot; title=&quot;实验结果&quot;&gt;&lt;/a&gt;实验结果&lt;/h3&gt;&lt;p&gt;实验结果分别在三个大型的数据集中进行了测试，并且与当前多种主流的顶尖的显著性检测算法进行了比较。实验的评价指标用了三个：准确率、查全率和F-特征，前两个比较好理解，第三个指标其实就是一个同时考虑查全率和准确率的一个综合性指标。实验结果如下：&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg8.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg9.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg10.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2F%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%9A%84%E6%B5%81%E8%A1%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E6%B5%8B%2Fimg11.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;文章中最后还进行了运行时间的比较，结果也是很好的。&lt;/p&gt;
&lt;h3 id=&quot;总结与改进&quot;&gt;&lt;a href=&quot;#总结与改进&quot; class=&quot;headerlink&quot; title=&quot;总结与改进&quot;&gt;&lt;/a&gt;总结与改进&lt;/h3&gt;&lt;h4 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;p&gt;本文提出的基于图的流行排序的显著性检测算法创新的将流行排序作为相似度度量的方式，并且分两阶段进行显著性的检测，实验结果显示具有非常优秀的实验效果，但是仍然存在着一些不足，当较大面积的显著性目标接触到图像边界时，算法效果不够理想，这是因为第一阶段时背景假设过于理想化，此外，在第二阶段的前景种子节点选取时，自适应的阈值分割方法有时会选择出错误的节点，虽然论文最终的实验结果很好，但这个方面仍有待改进。&lt;/p&gt;
&lt;h4 id=&quot;改进&quot;&gt;&lt;a href=&quot;#改进&quot; class=&quot;headerlink&quot; title=&quot;改进&quot;&gt;&lt;/a&gt;改进&lt;/h4&gt;&lt;p&gt;1.在选取种子节点时，用一些聚类算法将边界进行分类（如GMM），然后将每一类的节点作为种子节点，得到显著图结果。&lt;br&gt;2.利用区域与边界的连通性计算属于背景节点的概率，据此赋予超像素节点不同的背景权重，从而改进前景节点的选取。&lt;br&gt;注：改进是本人的愚见，未经过验证，如有错误望包涵！当然也欢迎交流指正！&lt;/p&gt;
&lt;h3 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Saliency Detection via Graph-Based Manifold Ranking&lt;/li&gt;
&lt;li&gt;基于传播模型的显著性检测方法&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 最近详细的看的一篇显著性检测方面论文，现将一些自己的理解贴出来,如有错误望大家指正！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="图像处理" scheme="http://wanano.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="论文学习" scheme="http://wanano.github.io/tags/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>hexo3.2.0搭建静态博客指南与心得</title>
    <link href="http://wanano.github.io/2016/05/12/hexo3-2-0%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97%E4%B8%8E%E5%BF%83%E5%BE%97/"/>
    <id>http://wanano.github.io/2016/05/12/hexo3-2-0搭建静态博客指南与心得/</id>
    <published>2016-05-12T07:51:12.000Z</published>
    <updated>2016-06-26T06:38:56.839Z</updated>
    
    <content type="html">&lt;p&gt; &lt;strong&gt; 注意，本文搭建博客的版本为hexo3.2.0，可能与其他版本略有出入。&lt;/strong&gt;&lt;br&gt;我是一个hexo小白，参考了网上很多的搭建方法，现在写写自己的搭建心得和方法，如有错误望各位指正。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;之前看到一个师兄写的博客，不同于之前一些著名网站的博客，感觉很厉害很有技术性，于是自己想尝试下自己能不能试着搭一个出来。有了目标便开始进行前期的准备工作，下载并学习git，去学习了一点HMTL和CSS的知识，最开始想用Jekyll搭建，但是发现网上的教程比较复杂，而且尝试了下自己确实没搞太懂（现在搞懂了点），于是转换思路，去知乎一搜，发现大神都推荐用hexo，适合于小白，于是自己决定采用这个方案（放弃前者的主要原因还是自己什么都不懂啊，哭哭~！），果不其然，网上教程比较详细，自己也大致的搞懂了一些，于是有了现在这个样子，当然还有待后期的加工和优化，以后自己会多“折腾”！ &lt;/p&gt;
&lt;h3 id=&quot;hexo介绍&quot;&gt;&lt;a href=&quot;#hexo介绍&quot; class=&quot;headerlink&quot; title=&quot;hexo介绍&quot;&gt;&lt;/a&gt;hexo介绍&lt;/h3&gt;&lt;p&gt;hexo是一个基于node.js的静态博客程序，可以很方便的生成静态托管页面在github page上，作者是台湾的一个大学生&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tommy351&lt;/a&gt;, 搭建静态博客有很多方法，最开始我在知乎上搜寻，有jekyll，hexo，WordPress等等，出于好奇，我还去各自搜寻了一下，但当技术小白的我看完一些博客之后，我的内心是崩溃的啊，需要各种知识有木有啊！本着由简到难的原则，于是选择hexo的方法&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2Fhexo%E6%90%AD%E5%BB%BAblog%2Fhexo%E6%90%AD%E5%BB%BAblog1.jpg&quot; alt=&quot;宝宝委屈&quot;&gt;&lt;br&gt;hexo有以下一些优势：&lt;br&gt;1.生成静态页面&lt;br&gt;2.支持markdown（虽然我之前并不懂这是什么，百度到是一种可以使用普通文本器编写的标记语言）&lt;br&gt;3.兼容Windows，Mac&amp;amp;Linux&lt;br&gt;4.部署方便。命令很少而且很好理解。&lt;br&gt;5.高扩展性、自订性、可玩性较高。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;1.安装git：网上教程有很多，基于Windows平台的一般推荐&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;msysgit&lt;/a&gt;，不懂可以看廖雪峰老师的教程。&lt;/p&gt;
&lt;p&gt;2.安装node.js&lt;/p&gt;
&lt;p&gt;3.安装hexo：在git bash下运行命令 &lt;strong&gt;npm install -g hexo&lt;/strong&gt; 即可，装完后可用命令 &lt;strong&gt;hexo -v&lt;/strong&gt; 查看版本。&lt;/p&gt;
&lt;p&gt;4.创建一个hexo文件夹：该文件夹就是防止博客内容的文件夹，创建好后单击右键，选择git bash here，然后进入gitbash命令行，以后进行操作也都是以这种方式进入，执行命令 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hexo init&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;然后hexo会自动生成要创建网站的所有文件。&lt;/p&gt;
&lt;p&gt;5.安装依赖包，执行命令&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;6.由于网站是要托管在github上，因此你必须要创建注册一个github账号，并且新建一个Repository，名字必须是你的 &lt;strong&gt;github名.github.io&lt;/strong&gt; ,如我的就是 &lt;strong&gt;wanano.github.io&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;这样一个初始化的hexo博客就算搭建好了，你可以运行 &lt;strong&gt;hexo s&lt;/strong&gt; 命令在本地查看效果，输入命令后在浏览器输入网址 &lt;strong&gt;&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;/strong&gt; 查看，效果如下图所示：&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2Fhexo%E6%90%AD%E5%BB%BAblog%2Fhexo%E6%90%AD%E5%BB%BAblog2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置博客&quot;&gt;&lt;a href=&quot;#配置博客&quot; class=&quot;headerlink&quot; title=&quot;配置博客&quot;&gt;&lt;/a&gt;配置博客&lt;/h3&gt;&lt;p&gt;之前的步骤已经让我们在本地搭建好了博客的框架，那么我们如何让自己的博客出现在网上呢？关键来了，首先我们先打开hexo文件夹下的网站配置文件，即&lt;strong&gt;_config.yml&lt;/strong&gt;文件，打开方式新手推荐使用&lt;a href=&quot;http://pan.baidu.com/s/1sj02k2L&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sublime text3&lt;/a&gt;,或者notepad++，如果不会可以花点时间简单的学习一下。一些简单的修改可以参考我的格式，我是按照博主&lt;a href=&quot;http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;loveNight&lt;/a&gt;的博客修改的，大家也可以参考下。关键是修改本文档的末尾，因为我们是采用git的方式同步到github上，所以文档的最后应该如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy: 
  type: git
  repository: ##存放你博客的库的网址
  branch: master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后在git上（git bash的路径是你电脑存放博客的文档）使用命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo g
hexo d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就将你本地的博客框架同步到github上了，这能不能输入一个网址看到我的博客了呢？很抱歉，还差最后一步，那就是到github的仓库中更改你的网址，如下图所示：&lt;br&gt;&lt;img src=&quot;http://o6wayjgzn.bkt.clouddn.com/img%2Fhexo%E6%90%AD%E5%BB%BAblog%2Fhexo%E6%90%AD%E5%BB%BAblog3.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;耐心的等待几分钟，到时候就可以输入你之前写好的网址进行查看啦！需要注意的是，由于网站是托管于github上的，所以命名格式一定是&lt;strong&gt;#你的库的名字.github.io&lt;/strong&gt;。这样，最初是的博客框架就搭好了，当然之后需要很多修改和美化的地方，这就需要自己多耐心的折腾，不过网上资料还是比较多，相信大家耐心一点都可以解决（碰到问题首先要自己去试着解决，有时候自己一个好简单的问题都没搞清楚就去请教别人好傻逼的，我是过来人，哭哭！！）。&lt;/p&gt;
&lt;h3 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h3&gt;&lt;p&gt;由于自己水平有限，这篇博客写的太水，而且自己也还在学习当中，特意贴出一些写的比较好而且人非常nice的大神的hexo博客搭建指南，希望可以提供大家参考，当然这篇博客也还有待改进，自己最近有点忙，思路也有点乱，这篇博客以后自己还会改进，并且等到时候有时间或者自己进阶以后会再写一篇关于hexo搭建博客遇到的问题及解决方案的，未完待续！&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo 3.1.1 静态博客搭建指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wenghaobin.tk/2016/05/01/Hexo%20My%20Blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo my blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt; 注意，本文搭建博客的版本为hexo3.2.0，可能与其他版本略有出入。&lt;/strong&gt;&lt;br&gt;我是一个hexo小白，参考了网上很多的搭建方法，现在写写自己的搭建心得和方法，如有错误望各位指正。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="http://wanano.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="http://wanano.github.io/tags/hexo/"/>
    
      <category term="keeplearning" scheme="http://wanano.github.io/tags/keeplearning/"/>
    
  </entry>
  
  <entry>
    <title>你好，卡比巴拉的海</title>
    <link href="http://wanano.github.io/2016/04/29/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%8D%A1%E6%AF%94%E5%B7%B4%E6%8B%89%E7%9A%84%E6%B5%B7/"/>
    <id>http://wanano.github.io/2016/04/29/你好，卡比巴拉的海/</id>
    <published>2016-04-29T08:15:47.000Z</published>
    <updated>2016-05-16T06:07:25.547Z</updated>
    
    <content type="html">&lt;p&gt;   Hello! 这是我的博客。&lt;br&gt;   &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;   欢迎大家，这是我第一次正式写博客啊，还请大家多多指教，也希望自己能够不断进步，嘻嘻！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   Hello! 这是我的博客。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://wanano.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Good good study" scheme="http://wanano.github.io/tags/Good-good-study/"/>
    
      <category term="Day day up" scheme="http://wanano.github.io/tags/Day-day-up/"/>
    
  </entry>
  
</feed>
